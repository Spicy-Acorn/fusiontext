-- ============================================================================
-- modules
-- ============================================================================
local textutils = self and require("textutils") or nil

-- ============================================================================
-- constants
-- ============================================================================
FUSE_NAME = "TextSub"
DATATYPE = "Text"

-- ============================================================================
-- fuse
-- ============================================================================
FuRegisterClass(FUSE_NAME, CT_Tool, {
    REGID_DataType = DATATYPE,
    REGID_InputDataType = DATATYPE,
    REG_NoCommonCtrls = true,
    REGS_Category = "Vonk\\Text",
    REGS_Name = FUSE_NAME,
    REGS_OpDescription = "Returns a substring of a string.",
    REGS_OpIconString = FUSE_NAME
})

function Create()
    -- [[ Creates the user interface. ]]
    InText = self:AddInput("Text", "Text", {
        LINKID_DataType = "Text",
        LINK_Main = 1
    })

    InStart = self:AddInput("Start", "Start", {
        LINKID_DataType = "Number",
        INPID_InputControl = "SliderControl",
        INP_Integer = true,
        TEC_Lines = 1,
        ICD_Width = 0.5,
        INP_MinScale = 1,
        INP_MaxScale = 100,
        INP_Default = 1,
        IC_Steps = 1
    })

    InEnd = self:AddInput("End", "End", {
        LINKID_DataType = "Number",
        INPID_InputControl = "SliderControl",
        INP_Integer = true,
        TEC_Lines = 1,
        ICD_Width = 0.5,
        INP_MinScale = -100,
        INP_MaxScale = -1,
        INP_Default = -1,
        IC_Steps = 1
    })

    OutText = self:AddOutput("Output" , "Output" , {
        LINKID_DataType = "Text",
        LINK_Main = 1
    })
end

function Process(req)
    -- [[ Creates the output. ]]
    local text = InText:GetValue(req).Value
    local s = InStart:GetValue(req).Value or 1
    local e = InEnd:GetValue(req).Value or -1

    local text = textutils.sub(text, s, e)
    local fu_text = textutils.to_fusion_text(text)
    OutText:Set(req, fu_text)
end
