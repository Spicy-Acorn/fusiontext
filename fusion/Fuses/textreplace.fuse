-- ============================================================================
-- modules
-- ============================================================================
local textutils = self and require("textutils") or nil

-- ============================================================================
-- constants
-- ============================================================================
FUSE_NAME = "TextReplace"
DATATYPE = "Text"

-- ============================================================================
-- fuse
-- ============================================================================
FuRegisterClass(FUSE_NAME, CT_Tool, {
    REGID_DataType = DATATYPE,
    REGID_InputDataType = DATATYPE,
    REG_NoCommonCtrls = true,
    REGS_Category = "Vonk\\Text",
    REGS_Name = FUSE_NAME,
    REGS_OpDescription = "Replaces substrings of a string.",
    REGS_OpIconString = FUSE_NAME
})

function Create()
    -- [[ Creates the user interface. ]]
    InText = self:AddInput("Text", "Text", {
        LINKID_DataType = "Text",
        LINK_Main = 1
    })

    InPattern = self:AddInput("Pattern", "Pattern", {
        LINKID_DataType = "Text",
        INPID_InputControl = "TextEditControl",
        TEC_Lines = 1,
        ICD_Width = 1 / 2
    })

    InReplace = self:AddInput("Replace", "Replace", {
        LINKID_DataType = "Text",
        INPID_InputControl = "TextEditControl",
        TEC_Lines = 1,
        ICD_Width = 1 / 2
    })

    OutText = self:AddOutput("Output" , "Output" , {
        LINKID_DataType = "Text",
        LINK_Main = 1
    })
end

function safe_cast_string_to_number(str, default)
    --[[
        Casts a string to a number, if the string isn't a valid number, return given default.

        :param str: String to cast to number.
        :type str: string

        :param default: Default number if string cannot be casted.
        :type default: number

        :rtype: number
    ]]
    local num = default

    -- try to cast str to number
    local result = pcall(tonumber, str)
    if result then
        num = tonumber(str)
    end

    -- fallback to default if tonumber didn't raise an error but returned nil
    if num == nil then
        num = default
    end

    return num
end

function Process(req)
    -- [[ Creates the output. ]]
    local text = InText:GetValue(req).Value
    local pattern = InPattern:GetValue(req).Value
    local repl = InReplace:GetValue(req).Value

    local replaced = textutils.replace(text, pattern, repl)
    local fu_text = textutils.to_fusion_text(replaced)
    OutText:Set(req, fu_text)
end
